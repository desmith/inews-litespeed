# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# See https://www.packer.io/docs/templates/hcl_templates/blocks/packer for more info
packer {
    required_plugins {
        amazon = {
            source  = "github.com/hashicorp/amazon"
            version = ">= 1.2.5"
        }
        ansible = {
            source  = "github.com/hashicorp/ansible"
            version = "~> 1"
        }
    }
}

data "amazon-parameterstore" "db_host" {
    name            = "/infra/inews/DB_HOST"
    with_decryption = false
}
data "amazon-parameterstore" "pma_user" {
    name            = "/infra/inews/PMA_USER"
    with_decryption = false
}
data "amazon-parameterstore" "pma_pass" {
    name            = "/infra/inews/PMA_PASS"
    with_decryption = true
}

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.
variable "ansible_bin_path" {
    type    = string
    default = "./.venv/bin"
}

variable "aws_region" {
    type    = string
    default = "us-east-1"
}

variable "env" {
    type    = string
    default = "int"
}

variable "iam_instance_profile" {
    type    = string
    default = "packer-builder"
}

variable "instance_type" {
    type    = string
    default = "t3.medium"
}

variable "name" {
    type = string
}

variable "security_group_id" {
    type = string
}

variable "source_ami" {
    type = string
}

variable "subnet_id" {
    type = string
}

variable "vpc_id" {
    type = string
}

variable "bastion_host_ip" {
    type = string
}

variable "bastion_private_key" {
    type = string
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
# could not parse template for following block: "template: hcl2_upgrade:2: bad character U+0060 '`'"

source "amazon-ebs" "packer-ebs" {
    region               = var.aws_region
    ami_name             = "${var.name}-{{isotime \"20060102030405\"}}"
    iam_instance_profile = var.iam_instance_profile
    instance_type        = var.instance_type
    imds_support         = "v2.0"

    launch_block_device_mappings {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        volume_size           = 12
        volume_type           = "gp3"
        iops                  = 3000
    }

    security_group_id = var.security_group_id

    ssh_bastion_host             = var.bastion_host_ip
    ssh_bastion_username         = "ec2-user"
    ssh_bastion_private_key_file = var.bastion_private_key
    source_ami                   = var.source_ami
    associate_public_ip_address  = false
    ssh_pty                      = true
    ssh_username                 = "ec2-user"
    ssh_interface                = "private_ip"
    subnet_id                    = var.subnet_id
    tags                         = {
        CreationDate = "{{isotime \"20060102 15:04:05 MST\"}}"
        Name         = "${var.name}-infra"
        app          = var.name
        env          = var.env
        created_by   = "packer"
        Terraform    = true
    }

    run_tags = {
        Name      = "packer-${var.name}-infra"
        app       = var.name
        env       = var.env
        Terraform = true
    }

    vpc_id = var.vpc_id
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
    sources = ["source.amazon-ebs.packer-ebs"]

    provisioner "file" {
        source      = "./files/.aliases"
        destination = "/tmp/.aliases"
    }

    provisioner "file" {
        source      = "./files/wp-cli.completions"
        destination = "/tmp/wp-cli.completions"
    }

    provisioner "file" {
        source      = "./files/.bashrc"
        destination = "/tmp/.bashrc"
    }

    provisioner "file" {
        source      = "./files/.bash_profile"
        destination = "/tmp/.bash_profile"
    }
    provisioner "shell" {
        execute_command = "{{ .Vars }} sudo -E -S bash -l '{{ .Path }}' ${var.env}"
        script          = "./scripts/os-config.sh"
    }

    provisioner "file" {
        source      = "./files/cw/post_disk_geometry.py"
        destination = "/tmp/post_disk_geometry"
    }

    provisioner "file" {
        source      = "./files/cw/disk_alarms"
        destination = "/tmp/disk_alarms"
    }

    provisioner "file" {
        source      = "./files/cw/amazon-cloudwatch-agent.json"
        destination = "/tmp/amazon-cloudwatch-agent.json"
    }

    provisioner "shell" {
        execute_command = "{{ .Vars }} sudo -E -S bash '{{ .Path }}'"
        script          = "./scripts/install-disk-alarms.sh"
    }

    provisioner "file" {
        source      = "./files/cw/cloudwatch_memory_alarm.py"
        destination = "/tmp/cloudwatch_memory_alarm"
    }

    provisioner "file" {
        source      = "./files/cw/memory-alarm.service"
        destination = "/tmp/memory-alarm.service"
    }

    provisioner "shell" {
        execute_command = "{{ .Vars }} sudo -E -S bash '{{ .Path }}'"
        script          = "./scripts/create-memory-alarm.sh"
    }

    provisioner "shell" {
        script = "./scripts/install-ssh-keys.sh"
    }

    provisioner "file" {
        source      = "./files/nginx/nginx.conf"
        destination = "/tmp/nginx.conf"
    }
    provisioner "shell" {
        inline = ["sudo mv /tmp/nginx.conf /etc/nginx/nginx.conf"]
    }

    provisioner "file" {
        source      = "./files/nginx/conf.d/common.conf"
        destination = "/tmp/common.conf"
    }
    provisioner "shell" {
        inline = ["sudo mv /tmp/common.conf /etc/nginx/conf.d/common.conf"]
    }

    provisioner "file" {
        source      = "./files/nginx/conf.d/php.conf"
        destination = "/tmp/php.conf"
    }
    provisioner "shell" {
        inline = ["sudo mv /tmp/php.conf /etc/nginx/conf.d/php.conf"]
    }

    provisioner "file" {
        source      = "./files/nginx/conf.d/wordpress.conf"
        destination = "/tmp/wordpress.conf"
    }
    provisioner "shell" {
        inline = ["sudo mv /tmp/wordpress.conf /etc/nginx/conf.d/wordpress.conf"]
    }

    provisioner "file" {
        content = templatefile("./files/php/config.inc.php.tpl", {
            db_host      = data.amazon-parameterstore.db_host.value
            pma_username = data.amazon-parameterstore.pma_user.value
            pma_password = data.amazon-parameterstore.pma_pass.value
        })

        destination = "/tmp/config.inc.php"
    }

    provisioner "file" {
        source      = "./files/php/phpMyAdmin.conf"
        destination = "/tmp/phpMyAdmin.conf"
    }
    provisioner "shell" {
        inline = [
            "sudo mkdir -p /etc/phpMyAdmin",
            "sudo mv /tmp/config.inc.php /etc/phpMyAdmin/config.inc.php",
            "sudo chmod -R 0755 /etc/phpMyAdmin",
            "sudo mv /tmp/phpMyAdmin.conf /etc/nginx/sites-available/phpMyAdmin.conf",
            "sudo ln -s /etc/nginx/sites-available/phpMyAdmin.conf /etc/nginx/sites-enabled/pma.iskconnews.org.conf"
        ]
    }

    provisioner "file" {
        source      = "./files/php/php.ini"
        destination = "/tmp/php.ini"
    }
    provisioner "file" {
        source      = "./files/php/40-memcached.ini"
        destination = "/tmp/40-memcached.ini"
    }
    provisioner "file" {
        source      = "./files/php/amazon-elasticache-cluster-client.so"
        destination = "/tmp/amazon-elasticache-cluster-client.so"
    }
    provisioner "shell" {
        inline = [
            "sudo mv /tmp/php.ini /etc/php.ini",
            "sudo mv /tmp/40-memcached.ini /etc/php.d/40-memcached.ini",
            "sudo mv /tmp/amazon-elasticache-cluster-client.so /usr/lib64/php8.2/modules/amazon-elasticache-cluster-client.so",
        ]
    }

    #  provisioner "ansible" {
    #    command         = "${var.ansible_bin_path}/ansible-playbook"
    #    galaxy_command = "${var.ansible_bin_path}/ansible-galaxy"
    #    extra_arguments = ["-vv"]
    #    playbook_file    = "./ansible/ansible_playbook.yml"
    #    galaxy_file     = "./ansible/ansible_requirements.yml"
    #    use_proxy       = false
    #  }

    provisioner "shell" {
        inline = ["aws --version"]
    }

    post-processor "manifest" {
        output     = "manifest.json"
        strip_path = true
    }

    post-processor "shell-local" {
        inline = ["jq -r .builds[].artifact_id manifest.json | awk -F : '{print $2}' > ami.txt"]
    }

}
